<?php
/**
 * @file
 * Module implementing a field-collection table formatter.
 */


/**
 * Implements hook_theme().
 */
function field_collection_table_theme($existing, $type, $theme, $path) {
  $base = [
    'file' => 'theme.inc',
    'path' => $path . '/theme',
  ];
  return [
    'field_collection_table_multiple_value_field' => $base + ['render element' => 'element'],
    'field_collection_table_multiple_value_fields' => $base + ['render element' => 'element'],
    'table__field_collection_table' => $base + [
        'variables' => [
          'header' => NULL,
          'rows' => NULL,
          'attributes' => [],
          'caption' => NULL,
          'colgroups' => [],
          'sticky' => TRUE,
          'empty' => '',
          'settings' => [],
        ],
      ],
  ];
}

/**
 * Implements hook_field_attach_form().
 */
function field_collection_table_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  // Host entity edit.
  foreach (field_info_instances($entity_type, $bundle) as $field_name => $instance) {
    if (isset($form[$field_name]) && $instance['widget']['type'] == 'field_collection_table') {
      $language = $form[$field_name]['#language'];
      $form[$field_name][$language]['#theme'] = 'field_collection_table_multiple_value_fields';
      $form[$field_name][$language]['#custom_settings'] = $instance['widget']['settings'];
      $form[$field_name][$language]['#pre_render'][] = 'field_collection_table_pre_render_multiple_fields';
    }
    $field = field_info_field($field_name);
    if ($field['type'] == 'field_collection'
      && $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED
      && empty($form_state['programmed'])
      && field_access('edit', $field, $entity_type)
      && $instance['widget']['type'] == 'field_collection_table'
    ) {

      $element_langcode = $form[$field_name]['#language'];
      $element_wrapper = $form[$field_name][$element_langcode]['add_more']['#ajax']['wrapper'];
      for ($i = 0; $i <= $form[$field_name][$element_langcode]['#max_delta']; $i++) {
        if (isset($form[$field_name][$element_langcode][$i]['remove_button'])) {
          $form[$field_name][$element_langcode][$i]['remove_button']['#ajax']['wrapper'] = $element_wrapper;
        }
      }
    }
  }

  // Individual field collection item edit.
  //
  if ($entity_type == 'field_collection_item') {
    $instance = $entity->instanceInfo();
    if ($instance['widget']['type'] == 'field_collection_table') {
      $form['#theme'] = 'field_collection_table_multiple_value_field';
      $form['#pre_render'][] = 'field_collection_table_pre_render_field';
    }
  }
}

/**
 * Callback for #pre_render for a single row, hide the titles for each field.
 */
function field_collection_table_pre_render_field($element) {
  if (isset($element['#entity_type']) && isset($element['#bundle'])) {
    foreach (field_info_instances($element['#entity_type'], $element['#bundle']) as $field_name => $instance) {
      if (empty($element[$field_name])) {
        continue;
      }

      $field = &$element[$field_name];
      $field_info = field_info_field($field_name);
      $language = $field['#language'];
      if (isset($field[$language])) {
        // Set the most common places for a title to display invisible.
        $field['#title_display'] = 'invisible';
        $field[$language]['#title_display'] = 'invisible';
        foreach (element_children($field[$language]) as $child) {
          if (array_key_exists('#type', $field[$language][$child]) &&
            !in_array($field[$language][$child]['#type'], array(
              'radio',
              'checkbox',
            ))
          ) {
            $field[$language][$child]['#title_display'] = 'invisible';
          }
          // Check the individual columns. Most commonly 'value'.
          foreach ($field_info['columns'] as $column => $column_info) {
            // Ensure column exist in form to prevent displaying empty
            // table columns.
            if (isset($field[$language][$child][$column])) {
              $field[$language][$child][$column]['#title_display'] = 'invisible';
            }
            // Date module sometimes adds its own random titles inside value.
            if (in_array($field_info['type'], array(
              'date',
              'datestamp',
              'datetime',
            ))) {
              foreach (element_children($field[$language][$child][$column]) as $date_child) {
                $field[$language][$child][$column][$date_child]['#title_display'] = 'invisible';
              }
            }
          }
        }
      }
      else {
        $field['#label_display'] = 'hidden';
      }
    }
  }
  return $element;
}

/**
 * Callback for #pre_render for multiple rows, hide the titles for each field.
 */
function field_collection_table_pre_render_multiple_fields($element) {
  foreach (element_children($element) as $key) {
    // Skip the 'add_more' element.
    if (is_numeric($key)) {
      $element[$key] = field_collection_table_pre_render_field($element[$key]);
    }
  }
  return $element;
}

/**
 * Implements hook_entity_view().
 */
function field_collection_table_entity_view($entity, $type, $view_mode, $langcode) {
//  if (get_class($entity) != 'FieldCollectionItemEntity') {
//    return;
//  }
//  if ($instance = $entity->instanceInfo()) {
//    $display = field_get_display($instance, $view_mode, $entity->hostEntity());
//    if ($display['type'] == 'field_collection_table_view') {
//      $entity->content['#theme'] = 'field_collection_table_multiple_value_field';
//      $entity->content['#pre_render'][] = 'field_collection_table_pre_render_field';
//    }
//  }
}


/**
 * Implements hook_field_widget_form().
 */
function field_collection_table_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'field_collection_table':
      $instance['widget']['type'] = 'field_collection_embed';
      $element = field_collection_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function field_collection_table_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'field_collection_table') {
    $form['nodragging'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable drag and drop'),
      '#description' => t('If checked, users cannot rearrange the rows.'),
      '#default_value' => $settings['nodragging'],
    );
    $form['title_on_top'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display title above table'),
      '#description' => t('If checked, field title will appear above the table.'),
      '#default_value' => $settings['title_on_top'],
    );
  }

  return $form;
}
